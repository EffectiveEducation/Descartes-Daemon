#platform=x86

#System language
lang en_US
#Language modules to install
langsupport ru_UA es_MX --default=en_US
#System keyboard
keyboard us
#System mouse
mouse
#System timezone
timezone America/Los_Angeles
#Root password
rootpw --disabled
#Initial user
user dummy --fullname "Dummy Account" --iscrypted --password $1$PhGr1JT6$V2qyBpenDSVlhreBxk4Z.0
#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#System authorization infomation
auth  --useshadow  --enablemd5 
#Network information
network --bootproto=dhcp --device=eth0
#Firewall configuration
firewall --disabled 
#Do not configure the X Window System
skipx



# ----------------------------------------------------------------------
# Script to run towards the beginning of the installation
# Note: d-i does some basic hardware detection, etc before running this
# ----------------------------------------------------------------------
%pre
#!/bin/bash 


# Changes to Virtual Terminal 6 so that output will display properly and can be interactive
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

# Copy Binaries into Appropriate Locations to Have a More Robust initial environment
cp --recursive /cdrom/pool/binary-i386/* /

# Make a RamDisk to store Environmental Variables, so they can be used later in the %post script
mkfs -q /dev/ram1 8192
mkdir -p /variables
mount /dev/ram1 /variables
mkdir fakevar

# Pre-Set Variables to Customize for Specific Organizations
# Example data shown below
# echo 'DescartesDaemon' > /variables/AdminPasswd
# echo 'orgname' > /variables/GuestOSHostname
# echo 'http://example.org/location/to.ova' > /variables/VirtualImageURL
# echo 'username' > /variables/VirtualImageURLUser
# echo 'password' > /variables/VirtualImageURLPasswd
# echo '80' > /variables/percentram

# Get variables that will be used later in the %post script

############################################ GET admin PASSWORD ##################################################

AdminPasswd="incorrect"
while [  "$AdminPasswd" != "$AdminPasswd2" ]; do    

 ###### THIS IS FOR PASSWORD ONE ######
 
 touch data
 data=/fakevar/data
 trap "rm -f $data" 0 1 2 5 15
 dialog --title "Admin Password" \
 --clear \
 --insecure \
 --passwordbox "Enter your password for the admin account (named admin)" 10 30 2> $data
 ret=$?
 case $ret in
   0)
     AdminPasswd="$(cat $data)";;
   1)
     shutdown;;
   255)
	 [ -s $data ] &&  cat $data || echo "ESC pressed." & shutdown;;
 esac

 ###### THIS IS FOR PASSWORD TWO ######

 sata=/fakevar/sata
 trap "rm -f $sata" 0 1 2 5 15
 dialog --title "Confirm Admin Password" \
 --clear \
 --insecure \
 --passwordbox "Please reenter your password for the admin account (named admin) to confirm the password" 10 30 2> $sata
 ret=$?
 case $ret in
   0)
     AdminPasswd2="$(cat $sata)";;
   1)
     shutdown;;
   255)
	 [ -s $sata ] &&  cat $sata || echo "ESC pressed." & shutdown;;
 esac
 if [ "$AdminPasswd" != "$AdminPasswd2" ];then
     dialog --title "Password Incorrect" --backtitle "Unmatching Passwords\
     Tutorial" --msgbox "I'm sorry, but your passwords do not match.\
     Please hit any button to try again." 9 50
 else
   echo $AdminPasswd > /variables/AdminPasswd
 fi
done



############################################  GET GUEST OS HOSTNAME, WHICH WILL ALSO BE USED AS PART OF THE HOST OS HOSTNAME ############################################

hostnmfile=/fakevar/hostnmfile
trap "rm -f $hostnmfile" 0 1 2 5 15
dialog --title "Host Hostname" --clear \
        --inputbox "This will set the Host OS hostname,\
to be shown on the network." 16 51 2> $hostnmfile
retval=$?
case $retval in
  0)
	GuestOSHostname="$(cat $hostnmfile)"
    echo $GuestOSHostname > /variables/GuestOSHostname;;
  1)
    shutdown;;
  255)
    if test -s $hostnmfile ; then
           GuestOSHostname="$(cat $hostnmfile)"
    else
      echo "ESC pressed."
    fi
    shutdown
    ;;
esac

############################################ Get number of Virtual Machines the user would like to install at this time ############################################
vmnum=/fakevar/vmnum
trap "rm -f $vmnum" 0 1 2 5 15
dialog --title "Number of Virtual Machines" --clear \
        --inputbox "How many virtual machines would you\
Like to have on the system?\
Don't worry, details about the\
virtual machines will come next." 16 51 2> $vmnum

retval=$?

case $retval in
  0)
    NumberOfVMs="$(cat $vmnum)" 
    echo $NumberOfVMs> /variables/NumberOfVMs;;
  1)
    shutdown;;
  255)
    if test -s $vmnum ; then
      NumberOfVMs="$(cat $hostnmfile)"
    else
      echo "ESC pressed."
    fi
    shutdown
    ;;
esac

############################################ Get URL to be used to download Virtual Image file at the end of the installation ############################################

export NumberOfVMs=`cat /variables/NumberOfVMs`
while [ $NumberOfVMs -gt 0 ];do
   urlova=/fakevar/urlova
   trap "rm -f $urlova" 0 1 2 5 15
   dialog --title "Virtual Machine OVA URL for VM `printf %04g $NumberOfVMs`" --clear \
     --inputbox "Descartes' Daemon will download a virtual image after installing itself.\
     It can use http, https, ftp, or smb (windows file sharing)\
     It will use either wget or smbget.  Read their documentation for more info.\
     Enter the full URL for VM `printf %04g $NumberOfVMs` (only use integers)" 16 51 2> $urlova
   retval=$?
   case $retval in
     0)
       VirtualImageURL="$(cat $urlova)"
       bash /cdrom/pool/config_files/declare.sh VirtualImageURL $VirtualImageURL $NumberOfVMs
	   ;;
     1)
       shutdown;;
     255)
       if test -s $urlova ; then
         cat $urlova
       else
         echo "ESC pressed."
       fi
       shutdown
       ;;
   esac

 ############################################ Now for the username/password ############################################

	case $VirtualImageURL in
	smb://*) 

	 ########### WHO ARE YOU? ##########
	   userurl=/fakevar/userurl
	   trap "rm -f $userurl" 0 1 2 5 15
	   dialog --title "Virtual Machine OVA URL for VM `printf %04g $NumberOfVMs`" --clear \
	     --inputbox "Please enter your username for the samba server.\
	   If you wish to user guest instead,\
	   you may leave this blank and hit enter." 16 51 2> $userurl
	   retval=$?
	   case $retval in
	     0)
	       VirtualImageURLUser="`cat $userurl`"
	       bash /cdrom/pool/config_files/declare.sh VirtualImageURLUser $VirtualImageURLUser $NumberOfVMs
	     ;;
	     1)
	       shutdown;;
	     255)
	       shutdown
	       ;;
	    esac

	 ###### IF EMPTY - IGNORE INPUTTING THE PASSWORD ######

	 if [ -z "$userurl" ]; then
	 :
	 else

	  ########### PASSWORD TIIIIIIIMMMMEEEEEE ##########

	   ###### THIS IS FOR PASSWORD ONE ######
	    VirtualImageURLPasswd="incorrect"
	    while [  "$VirtualImageURLPasswd" != "$VirtualImageURLPasswd2" ]; do   
		   touch passwdurl
		   passwdurl=/fakevar/passwdurl
		   trap "rm -f $passwdurl" 0 1 2 5 15
		   dialog --title "SMB Password" \
		   --clear \
		   --insecure \
		   --passwordbox "Enter your password for $VirtualImageURLUser" 10 30 2> $passwdurl
		   ret=$?
		   case $ret in
		     0)
		       VirtualImageURLPasswd="$(cat $passwdurl)";;
		     1)
		       shutdown;;
		     255)
		     [ -s $passwdurl ] &&  cat $passwdurl || echo "ESC pressed." & shutdown;;
		   esac

		   ###### THIS IS FOR PASSWORD TWO ######

		   passwsurl=/fakevar/passwsurl
		   trap "rm -f $passwsurl" 0 1 2 5 15
		   dialog --title "Confirm SMB Password" \
		   --clear \
		   --insecure \
		   --passwordbox "Please reenter your password for $VirtualImageURLUser to confirm the password" 10 30 2> $passwsurl
		   ret=$?
		   case $ret in
		     0)
		       VirtualImageURLPasswd2="$(cat $passwsurl)";;
		     1)
		       shutdown;;
		     255)
		     [ -s $passwsurl ] &&  cat $passwsurl || echo "ESC pressed." & shutdown;;
		   esac
		   if [ "$VirtualImageURLPasswd" != "$VirtualImageURLPasswd2" ];then
		       dialog --title "Password Incorrect" --backtitle "Unmatching Passwords\
		       Tutorial" --msgbox "I'm sorry, but your passwords do not match.\
		       Please hit any button to try again." 9 50
		   else
		     bash /cdrom/pool/config_files/declare.sh VirtualImageURLPasswd $VirtualImageURLPasswd $NumberOfVMs
		   fi
	    done
	 fi
	  ;;
	*) 
	  :
	  ;;
	esac
NumberOfVMs=$((NumberOfVMs - 1))
done

############################################ GETS AMOUNT OF RAM TO BE ALLIOCATED TO EACH VM ############################################
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [ $NumberOfVMs -gt 0 ];do
  while [ "$percentokay" != "okay" ]; do
   ramallio=/fakevar/ramallio
   trap "rm -f $ramallio" 0 1 2 5 15
   dialog --title "RAM Alliocation for VM `printf %04g $NumberOfVMs`" --clear \
     --inputbox "Enter percentage of RAM to allot VM\
   `printf %04g $NumberOfVMs` (only use integers between 1-75)" 16 51 2> $ramallio
   retval=$?
   case $retval in
     0)
       percentram="$(cat $ramallio)";;
     1)
       shutdown;;
     255)
       if test -s $ramallio ; then
         cat $ramallio
       else
         echo "ESC pressed."
       fi
       shutdown
       ;;
   esac

   if [ "$percentram" -lt 76 ]; then
        percentokay="okay"
        bash /cdrom/pool/config_files/declare.sh percentram $percentram $NumberOfVMs
     else
         dialog --title "Incorrect Number Input" --backtitle "Number Is\
         Incorrect" --msgbox "The number you selected is either too high\
         or otherwise incorrect." 9 50
     fi
  done
percentokay="notokay"
NumberOfVMs=$((NumberOfVMs - 1))
done

############################################ Confirms that the user knows that the disk is going to get wiped with this installation ############################################

dialog --title "DATA LOSS" \
--backtitle "THIS WILL ERASE HARDDISK" \
--yesno "THE EXISTING DATA IN THIS HARDDISK WILL BE OVERWRITTEN!
ALL EXISTING DATA WILL BE LOST 
Are you sure you want to continue?" 7 60

response=$?
case $response in
   0) : ;;
   1) shutdown;;
   255) shutdown;;
esac

############################################ Reconfirms that the user knows that the disk is going to get wiped with this installation ############################################

dialog --title "DATA LOSS" \
--backtitle "THIS WILL ERASE HARDDISK" \
--yesno "KEEP IN MIND YOUR HARDDISK
AND ALL EXISTING DATA WILL BE LOST 
Let me ask you again, Are you sure you want to continue?" 7 60

response=$?
case $response in
   0) : ;;
   1) shutdown;;
   255) shutdown;;
esac

# Start a interactive shell (Comment/Uncomment and/or move as needed for debugging)
#/bin/ash
#bash --login

# Change back to Virtual Terminal 1 where the Install has been running
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

# Unmount RamDisk, but still leaving it in memory
umount /variables

# Automatically erases part of existing operating system, so that it avoids the confirmation dialogue about the drive being mounted
# See https://bugs.launchpad.net/ubuntu/+source/debian-installer/+bug/1370315
dd if=/dev/zero of=/dev/sda bs=1M count=10

# Unmounts SDA
umount /dev/sda

%end



# ---------------------------------------------------
# Script to run towards the end of the installation.
# Note: This does not run at the very end, as the
#       d-i still runs add users, etc, after this
# ---------------------------------------------------
%post
#!/bin/bash 
# --interpreter /usr/bin/bash /media/cdrom/pool/bin/bash


# Changes to Virtual Terminal 6 so that output will display properly and can be interactive
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

# Remount the RamDisk to get Variables
mkdir -p /variables
mount /dev/ram1 /variables
mkdir tempvars

# Import Variables
export GuestOSHostname=`cat /variables/GuestOSHostname`
export AdminPasswd=`cat /variables/AdminPasswd`
export NumberOfVMs=`cat /variables/NumberOfVMs`


while [  $NumberOfVMs -gt 0 ];do
	export percentram=`cat /variables/percentram_$(printf %04g $NumberOfVMs)`
	bash /media/cdrom/pool/config_files/retreive.sh percentram $percentram $NumberOfVMs

	export VirtualImageURL=`cat /variables/VirtualImageURL_$(printf %04g $NumberOfVMs)`
	bash /media/cdrom/pool/config_files/retreive.sh VirtualImageURL $VirtualImageURL $NumberOfVMs


	case $VirtualImageURL in
	smb://*) 
		export VirtualImageURLUser=`cat /variables/VirtualImageURLUser_$(printf %04g $NumberOfVMs)`
		bash /media/cdrom/pool/config_files/retreive.sh VirtualImageURLUser $VirtualImageURLUser $NumberOfVMs

		export VirtualImageURLPasswd=`cat /variables/VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)`
		bash /media/cdrom/pool/config_files/retreive.sh VirtualImageURLPasswd $VirtualImageURLPasswd $NumberOfVMs

		;;
	*) 
		:
		;;
	esac
NumberOfVMs=$((NumberOfVMs - 1))
done


###################################################################################################################################################


# Add Users
# Adds admin User
# Adds admin to sudoer
adduser --disabled-password --gecos "VirtualBox Admin" admin
echo "admin:$AdminPasswd" | chpasswd
usermod -a -G sudo admin

# Adds the GuestOS User
adduser --disabled-password --gecos "Guest OS" guestos
passwd guestos -d

# THIS NEEDS TO BE MOVED ABOUT

# Autologin to console
sudo apt-get install mingetty -y
sed -i 's/getty -8 38400/mingetty --autologin guestos/g' /etc/init/tty1.conf

# Install X
sudo apt-get install xorg xterm -y

# Installs jwm
apt-get install jwm menu -y
 
# Removes JWM from CDM menu
rm /usr/share/xsessions/Jwm.desktop

# Installs CDM
apt-get install dialog
apt-get install unzip zip -y
wget https://github.com/ghost1227/cdm/zipball/master -O cdm-master.zip
unzip cdm-master.zip
cd ghost*
./install.sh
cd ..
rm -rf ghost* cdm-master.zip

# Launches CDM upon login (which will be automatic)
cp /media/cdrom/pool/config_files/guestos/.bash_login /home/guestos/

#CDM Config File
cp /media/cdrom/pool/config_files/etc/cdmrc /etc/

################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################



tar xvf nameof.ova
qemu-img convert -O qcow2 *.vmdk guestos0001.qcow2
rm *.vmdk


# This is the only section of code that I know for certain will run. The rest will need to be modified or changed for QEMU/KVM rather than VirtualBox


apt-get install virt-viewer
virt-install \
    --connect=qemu:///system \
    --name=guestos0001 \
    --ram=1024 \
    --vcpus=4 \
    --sound \
    --check-cpu \
    --disk /path/to/disk/guestos0001.qcow2,format=qcow2 \
    --import
virsh shutdown guestos0001
virsh destroy  guestos0001



################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################

# Installs smbclient for smbget
apt-get install smbclient -y

# Download Virtual Image from $VirtualImageURL
# Better user/password handling should occur as there is currently the assumption that smb has a user and password and wget doesn't
# Imports the VM and removes it right afterwards.
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	VirtualImageURL=`cat /tempvars/"VirtualImageURL_$(printf %04g $NumberOfVMs)"`
	VirtualImageURLUser=`cat /tempvars/"VirtualImageURLUser_$(printf %04g $NumberOfVMs)"`
	VirtualImageURLPasswd=`cat /tempvars/"VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)"`
	cd /usr/share/virtualbox
	case $VirtualImageURL in
	smb://*) 
		smbget $VirtualImageURL --username=$VirtualImageURLUser --password=$VirtualImageURLPasswd
	    ;;
	*) 
		wget $VirtualImageURL
		;;
	esac
	mv *.ova /usr/share/virtualbox/"guestos_$(printf %04g $NumberOfVMs)".ova
	cputoset=`nproc`
	percentram=`cat /tempvars/"percentram_$(printf %04g $NumberOfVMs)"`
	ram=`free -mt | grep Mem | awk '{print $2}'`
	ramvartransfer=`expr $ram \\* $percentram`
	guestosram=`expr $ramvartransfer / 100`
	su -c "VBoxManage import /usr/share/virtualbox/guestos_$(printf %04g $NumberOfVMs).ova --vsys 0 --cpus $cputoset --memory $guestosram --vmname guestos_$(printf %04g $NumberOfVMs)" guestos
	rm /usr/share/virtualbox/guestos_$(printf %04g $NumberOfVMs).ova
NumberOfVMs=$((NumberOfVMs - 1))
done

# Temporary kludge. This program does not work if WiFi and Ethernet are both being used
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	networktype=`VBoxManage showvminfo guestos_$(printf %04g $NumberOfVMs) | grep "NIC 1:" | awk '{ print $6 }' | tr -d ','`
	case $networktype in
		"NAT")
			:
			;;
		"Bridged")
			vboxmanage list bridgedifs | grep -w "Name" | awk '{ print $2 }' | while read output;
			do
			intertube=0
			echo "begin ping"
			ping -c 1 -I $output google.com
			if [ $? -eq  0 ]; then
			     ping success
					 su -c "VBoxManage modifyvm guestos_$(printf %04g $NumberOfVMs) --nic1 bridged" guestos
					 su -c "VBoxManage modifyvm guestos_$(printf %04g $NumberOfVMs) --bridgeadapter1 $output" guestos
			else
				 echo "fail ping"           
			fi
			done
			;;
		*)
			:
			;;
	esac
NumberOfVMs=$((NumberOfVMs - 1))
done

# Turns off VirtualBox warning messages
su -c 'VBoxManage setextradata global GUI/SuppressMessages remindAboutAutoCapture,confirmInputCapture,remindAboutMouseIntegration,remindAboutWrongColorDepth,showRuntimeError.warning.HostAudioNotResponding,remindAboutGoingSeamless,remindAboutInputCapture,remindAboutGoingFullscreen,remindAboutMouseIntegrationOff,confirmGoingSeamless,remindAboutPausedVMInput,confirmVMReset,confirmGoingFullscreen' guestos

# Turns off VirtualBox Mini Toolbar
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	su -c "VBoxManage setextradata guestos_$(printf %04g $NumberOfVMs) GUI/ShowMiniToolBar no" guestos
NumberOfVMs=$((NumberOfVMs - 1))
done

# Turns off VirtualBox menus, shortcut keys, etc.
su -c 'VBoxManage setextradata global GUI/Input/MachineShortcuts "TakeScreenshot=None,MouseIntegration=None,TypeCAD=None,TypeCABS=None,Pause=None,Reset=None,SaveState=None,Shutdown=None,PowerOff=None,Close=None,FullscreenMode=None,SeamlessMode=None,ScaleMode=None,WindowAdjust=None,PopupMenu=None, SettingsDialog=None,InformationDialog=None,NetworkAdaptersDailog=None,SharedFoldersDialog=None,InstallGuestAdditions=None"' guestos

# Fixes USB Issue
adduser admin vboxusers
adduser guestos vboxusers

# Copy VirtualBox XSession
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
cp /media/cdrom/pool/config_files/xsessions/GuestOS.desktop /usr/share/xsessions/"GuestOS_$(printf %04g $NumberOfVMs)".desktop
sed -i "s/replaceme/guestos_$(printf %04g $NumberOfVMs)/g" /usr/share/xsessions/"GuestOS_$(printf %04g $NumberOfVMs)".desktop
NumberOfVMs=$((NumberOfVMs - 1))
done

# Copy chvt 1 command
cp /media/cdrom/pool/config_files/etc/rc.local /etc/

# Copy Automount UDev Rules
cp /media/cdrom/pool/config_files/udev/10-usbmount.rules /etc/udev/rules.d/
cp /media/cdrom/pool/config_files/usrbin/vbox-automount-usb /usr/bin/
export NumberOfVMs=`cat /variables/NumberOfVMs`
sed -i "s/replaceme/$NumberOfVMs/g" /usr/bin/vbox-automount-usb
chmod +x /usr/bin/vbox-automount-usb

#Fixes X11 not working issue
sed -i '/allowed_users=console/c\allowed_users=anybody' /etc/X11/Xwrapper.config

# Change hostname
echo "$GuestOSHostname" > /etc/hostname 
sed -i "2s/.*/127.0.1.1		$GuestOSHostname/" /etc/hosts

# Save First Boot Snapshot
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
su -c 'VBoxManage startvm GuestOS_$(printf %04g $NumberOfVMs) --type headless' guestos
su -c 'VBoxManage snapshot GuestOS_$(printf %04g $NumberOfVMs) take firstboot' guestos
su -c 'VBoxManage controlvm GuestOS_$(printf %04g $NumberOfVMs) poweroff' guestos
NumberOfVMs=$((NumberOfVMs - 1))
done

rm -rf /tempvars/

# Start a %post interactive shell (Comment/Uncomment and/or move as needed for debugging)
#/bin/bash

# How to implament the multi VM loop:
# See retreive.sh and declare.sh

# Installation Logs - https://help.ubuntu.com/community/KickstartCompatibility#Installation_Logs
#cd /var/log/installer
#cat syslog | grep kickseed

# Change back to Virtual Terminal 1 where the Install has been running
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
# Special thanks to:
# VirtualBox team - for their amazing VirtaulBox tool
# Kickstart Configurator - for getting us started with this file
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end
