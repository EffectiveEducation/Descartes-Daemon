#Generated by Kickstart Configurator
#platform=x86

#System language
lang en_US
#Language modules to install
langsupport ru_UA es_MX --default=en_US
#System keyboard
keyboard us
#System mouse
mouse
#System timezone
timezone America/Los_Angeles
#Root password
rootpw --disabled
#Initial user
user dummy --fullname "Dummy Account" --iscrypted --password $1$PhGr1JT6$V2qyBpenDSVlhreBxk4Z.0
#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#System authorization infomation
auth  --useshadow  --enablemd5 
#Network information
network --bootproto=dhcp --device=eth0
#Firewall configuration
firewall --disabled 
#X Window System configuration information
xconfig --depth=16 --resolution=800x600 --startxonboot



# ----------------------------------------------------------------------
# Script to run towards the beginning of the installation
# Note: d-i does some basic hardware detection, etc before running this
# ----------------------------------------------------------------------
%pre

# Changes to Virtual Terminal 6 so that output will display properly and can be interactive
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6


# Copy Binaries into Appropriate Locations to Have a More Robust initial environment
cp --recursive /cdrom/pool/binary-i386/* /

# Make a RamDisk to store Environmental Variables, so they can be used later in the %post script
mkfs -q /dev/ram1 8192
mkdir -p /variables
mount /dev/ram1 /variables


# Pre-Set Variables to Customize for Specific Organizations
# Example data shown below
# echo 'VubuntuBox' > /variables/VubAdminPasswd
# echo 'hccts' > /variables/GuestOSHostname
# echo 'http://vubuntubox.org/FreeDos_1.1.ova' > /variables/VirtualImageURL
# echo 'labassist' > /variables/VirtualImageURLUser
# echo 'Gr8Minds' > /variables/VirtualImageURLPasswd
# echo '80' > /variables/percentram
# echo 'yes' > /variables/bridged

# Get variables that will be used later in the %post script

# Get vubadmin Password
echo 'VubuntuBox Admin (vubadmin) Password'
echo '===================================='
echo
stty -echo
		 VubAdminPasswd="incorrect"
         while [  "$VubAdminPasswd" != "$VubAdminPasswd2" ]; do        
             read -p "Enter the Password for the vubadmin user: " VubAdminPasswd
             echo
			 read -p "Confirm vubadmin Password: " VubAdminPasswd2
 			 if [ "$VubAdminPasswd" != "$VubAdminPasswd2" ];
				 then
				 	 echo
 				 	 echo "Passwords do not match. Please retry"
 				 	 echo
				 else
			  		 echo $VubAdminPasswd > /variables/VubAdminPasswd
			 fi
         done
stty echo
echo
echo


# Get Guest OS Hostname, which will also be used as part of the Host OS Hostname
echo
echo 'Guest OS Hostname'
echo '================='
echo 'This will also be used in the Host OS hostname, where it will have the same name,'
echo 'with "-vub" added as a suffix'
echo
read -p "Enter the main Guest OS Hostname: " GuestOSHostname
echo $GuestOSHostname > /variables/GuestOSHostname
echo
echo

# Get number of Virtual Machines the user would like to install at this time
echo 'Virtual Machine Number'
echo '================='
read -p "How many Virtual Machines would you like? " NumberOfVMs
echo $NumberOfVMs > /variables/NumberOfVMs
echo
echo


# Gets amount of RAM to be alliocated to each VM 
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [ $NumberOfVMs -gt 0 ];do
	while [ "$percentokay" != "okay" ]; do
		 echo $percentokay
		 echo RAM Alliocation for VM `printf %04g $NumberOfVMs`
		 echo '======================='
		 echo
		 read -p "Enter percentage of RAM to allot VM `printf %04g $NumberOfVMs` (only use integers): " percentram
		 echo $percentram > /variables/percentram
		 if [ "$percentram" -lt 100 ]; then
			 	percentokay="okay"
			 	echo
			 	bash /cdrom/pool/config_files/declare.sh percentram
		 	 	export percentram_$(printf %04g $NumberOfVMs)=`cat /variables/percentram_$(printf %04g $NumberOfVMs)`
			 	echo percentram_$(printf %04g $NumberOfVMs) > /variables/percentram_$(printf %04g $NumberOfVMs)
			 	echo
		 else
			 	echo
			 	echo "The number you selected is either too high or otherwise incorrect. Please try again"
			 	echo
		 fi
	done
percentokay="notokay"
let NumberOfVMs=NumberOfVMs-1
done

# Get URL to be used to download Virtual Image file at the end of the installation
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	echo Virtual Machine OVA URL for VM `printf %04g $NumberOfVMs`
	echo '======================='
	echo
	echo 'VubuntuBox will download a virtual image after installing itself.'
	echo 'It can use http, https, ftp, or smb (windows file sharing)'
	echo 'It will use either wget or smbget.  Read their documentation for more info.'
	echo
	read -p "Enter the full URL of the Virtual Image: " VirtualImageURL
	echo $VirtualImageURL > /variables/VirtualImageURL
 	bash /cdrom/pool/config_files/declare.sh VirtualImageURL
 	export VirtualImageURL_$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURL_$(printf %04g $NumberOfVMs)`
	echo VirtualImageURL_$(printf %04g $NumberOfVMs) > /variables/VirtualImageURL_$(printf %04g $NumberOfVMs)
	echo

	case $VirtualImageURL in
	smb://*) 
		echo
		read -p "If required, enter the username for the Virtual Image URL: " VirtualImageURLUser
		echo $VirtualImageURLUser > /variables/VirtualImageURLUser
	 	bash /cdrom/pool/config_files/declare.sh VirtualImageURLUser
	 	export VirtualImageURLUser_$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURLUser_$(printf %04g $NumberOfVMs)`
		echo VirtualImageURLUser_$(printf %04g $NumberOfVMs) > /variables/VirtualImageURLUser_$(printf %04g $NumberOfVMs)
		echo
		stty -echo
	    	while [  "$VirtualImageURLPasswd" != "$VirtualImageURLPasswd2" ]; do        
		    		 read -p "If required, enter the password for the Virtual Image URL: " VirtualImageURLPasswd
		    		 echo
				 	 read -p "Confirm vubadmin Password: " VirtualImageURLPasswd2
				 if [ "$VirtualImageURLPasswd" != "$VirtualImageURLPasswd2" ];
				 then
				 	 echo
				 	 echo "Passwords do not match. Please retry"
				 	 echo
				 else
					 echo $VirtualImageURLPasswd > /variables/VirtualImageURLPasswd
				 	 bash /cdrom/pool/config_files/declare.sh VirtualImageURLPasswd
				 	 export VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)`
	 		  	 	 echo VirtualImageURLPasswd_$(printf %04g $NumberOfVMs) > /variables/VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)
			 	fi
	     	done
		stty echo
		;;
	*) 
		:
		;;
	esac
	echo
	echo
let NumberOfVMs=NumberOfVMs-1
done

# Confirms that the user knows that the disk is going to get wiped with this installation
echo 'WARNING!!! WARNING!!! WARNING!!!'
echo 'WARNING! THE EXISTING DATA IN THIS HARDDISK WILL BE OVERWRITTEN!'
echo 'ALL EXISTING DATA WILL BE LOST'
echo
read -p "Are you sure you want to continue? ? (y/n) " -n 1 REPLY
echo
if [[ "$REPLY" != "y" ]]; then
    shutdown      
fi
echo
read -p "Let me ask you again, Are you sure you want to continue? (y/n) " -n 1 REPLY
echo
if [[ "$REPLY" != "y" ]]; then
    shutdown      
fi

# Start a %pre interactive shell (Comment/Uncomment and/or move as needed for debugging)
/bin/ash

# Change back to Virtual Terminal 1 where the Install has been running
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

# Unmount RamDisk, but still leaving it in memory
umount /variables


# Unmount Vub, but still leaving it in the memory
unmount /vub


# Automatically erases part of existing operating system, so that it avoids the confirmation dialogue about the drive being mounted
# See https://bugs.launchpad.net/ubuntu/+source/debian-installer/+bug/1370315
dd if=/dev/zero of=/dev/sda bs=1M count=10

%end



# ---------------------------------------------------
# Script to run towards the end of the installation.
# Note: This does not run at the very end, as the
#       d-i still runs add users, etc, after this
# ---------------------------------------------------
%post

# Changes to Virtual Terminal 6 so that output will display properly and can be interactive
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

# Remount the RamDisk to get Variables
mkdir -p /variables
mount /dev/ram1 /variables


# Import Variables
export GuestOSHostname=`cat /variables/GuestOSHostname`
export VubAdminPasswd=`cat /variables/VubAdminPasswd`
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	export VirtualImageURL_$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURL_$(printf %04g $NumberOfVMs)`
	export VirtualImageURLUser_$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURLUser_$(printf %04g $NumberOfVMs)`
	export VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)`
	export bridged_$(printf %04g $NumberOfVMs)=`cat /variables/bridged_$(printf %04g $NumberOfVMs)`
	export percentram_$(printf %04g $NumberOfVMs)=`cat /variables/percentram_$(printf %04g $NumberOfVMs)`
let NumberOfVMs=NumberOfVMs-1
done

# Does math to figure out guestosram from percentram
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	ram=`free -mt | grep Mem | awk '{print $2}'`
	ramvartransfer_$(printf %04g $NumberOfVMs)=`expr $ram \\* $percentram_$(printf %04g $NumberOfVMs)`
	guestosram_$(printf %04g $NumberOfVMs)=`expr $ramvartransfer_$(printf %04g $NumberOfVMs) / 100`
let NumberOfVMs=NumberOfVMs-1
done

# Add Users
# Adds vubdmin User
# Adds vubdmin to sudoer
adduser --disabled-password --gecos "VirtualBox Admin" vubadmin
echo "vubadmin:$VubAdminPasswd" | chpasswd
usermod -a -G sudo vubadmin

# Adds the GuestOS User
adduser --disabled-password --gecos "Guest OS" guestos
passwd guestos -d





# THIS NEEDS TO BE MOVED ABOUT
# ---------------------------------------------TEMP FOR LUBUNTU BASE-------------------------------------------------------------
apt-get remove --purge abiword abiword-common abiword-plugin-grammar abiword-plugin-mathview ace-of-penguins audacious audacious-plugins audacious-plugins-data blueman catfish chromium-browser chromium-browser-l10n chromium-codecs-ffmpeg elementary-icon-theme fonts-lyx galculator gdebi gdebi-core gecko-mediaplayer giblib1 gnome-desktop-data gnome-icon-theme-full gnome-mplayer gnome-system-tools gnome-time-admin gnumeric gnumeric-common gnumeric-doc gpicview gtk2-engines-pixbuf guvcview hardinfo indicator-application-gtk2 leafpad libaacs0 libabiword-2.9 libass4 libaudclient2 libaudcore1 libavcodec53 libavformat53 libavutil51 libbinio1ldbl libbluray1 libbs2b0 libcddb2 libcolamd2.7.1 libcompfaceg1 libcue1 libdca0 libdirectfb-1.2-9 libenca0 libept1.4.12 libexo-1-0 libexo-common libexo-helpers libfaad2 libfluidsynth1 libfm-data libfm-gtk-bin libfm-gtk-data libfm-gtk3 libfm3 libgdome2-0 libgdome2-cpp-smart0c2a libglade2-0 libgmlib0 libgmtk0 libgmtk0-data libgoffice-0.8-8 libgoffice-0.8-8-common libgsf-1-114 libgsf-1-common libgsm1 libgtkmathview0c2a libgtkspell0 libguess1 libid3tag0 libimlib2 libindicate-gtk3 libjpeg-progs libjpeg-turbo-progs liblink-grammar4 libloudmouth1-0 libmenu-cache1 libmms0 libmodplug1 libmowgli2 libmp3lame0 libmpg123-0 libmusicbrainz3-6 libnet-dbus-perl libobrender27 libobt0 libonig2 liboobs-1-5 libopts25 libots0 libpisock9 libpostproc52 librarian0 libresid-builder0c2a libschroedinger-1.0-0 libsdl1.2debian libsidplay2 libswscale2 libtidy-0.99-0 libtie-ixhash-perl libts-0.0-0 libuniconf4.6 libva1 libvdpau1 libvpx1 libvte-common libvte9 libwebcam0 libwv-1.2-4 libwvstreams4.6-base libwvstreams4.6-extras libxfce4ui-1-0 libxfce4util-bin libxfce4util-common libxfce4util6 libxfconf-0-2 libxml-parser-perl libxml-twig-perl libxml-xpath-perl libxvidcore4 lightdm-gtk-greeter link-grammar-dictionaries-en lm-sensors lp-solve lubuntu-artwork lubuntu-artwork-12-10 lubuntu-core lubuntu-default-settings lubuntu-desktop lubuntu-icon-theme lubuntu-lxpanel-icons lubuntu-software-center lxappearance lxappearance-obconf lxinput lxkeymap lxlauncher lxmenu-data lxpanel lxpanel-indicator-applet-plugin lxrandr lxsession lxsession-data lxsession-edit lxshortcut lxtask lxterminal mplayer2 mtpaint ntp obconf openbox openbox-themes pcmanfm pidgin pidgin-data pidgin-libnotify pidgin-microblog plymouth-theme-lubuntu-logo plymouth-theme-lubuntu-text python-pysqlite2 python-support python-xklavier rarian-compat scrot sylpheed sylpheed-doc sylpheed-i18n sylpheed-plugins synaptic system-tools-backends transmission tsconf uvcdynctrl uvcdynctrl-data wvdial xfburn xfce-keyboard-shortcuts xfce4-notifyd xfce4-power-manager xfce4-power-manager-data xfconf xfonts-100dpi xpad xscreensaver xscreensaver-data  -y
apt-get autoremove -y
# -------------------------------------------------------------------------------------------------------------------------------

# Autologin to console
sudo apt-get install mingetty -y
sed -i 's/getty 38400/mingetty --autologin guestos/g' /etc/init/tty1.conf

# Installs jwm
apt-get install jwm -y
apt-get install gkrellm -y

# Installs CDM
apt-get install dialog
wget https://github.com/ghost1227/cdm/zipball/master -O cdm-master.zip
unzip cdm-master.zip
cd ghost*
./install.sh
cd ..
rm -rf ghost*
rm -rf cdm-master.zip

# Launches CDM upon login (which will be automatic)
cp /media/cdrom/pool/config_files/guestos/.bash_login /home/guestos/

#CDM Config File
cp /media/cdrom/pool/config_files/etc/cdmrc /etc/





# THIS NEEDS TO BE MOVED ABOUT




# Install VirtualBox from its Repository
echo 'deb http://download.virtualbox.org/virtualbox/debian trusty contrib' >> /etc/apt/sources.list
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | apt-key add -
apt-get update
apt-get install virtualbox-4.3 -y
#apt-get install gdebi
#gdebi /media/cdrom/pool/config_files/deb/virtualbox_4.3.deb

# Fixes Kernel driver not installed problem
# From http://www.binarytides.com/fix-vbox-kernel-driver-error/
apt-get install build-essential module-assistant -y
m-a prepare
/etc/init.d/vboxdrv setup

# Installs smbclient for smbget
apt-get install smbclient -y

# Download Virtual Image from $VirtualImageURL
# Better user/password handling should occur as there is currently the assumption that smb has a user and password and wget doesn't
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	cd /usr/share/virtualbox
	if [[ $VirtualImageURL_$(printf %04g $NumberOfVMs) = smb://* ]];
	then
		 smbget $VirtualImageURL_$(printf %04g $NumberOfVMs) --username=$VirtualImageURLUser_$(printf %04g $NumberOfVMs) --password=$VirtualImageURLPasswd_$(printf %04g $NumberOfVMs)
	else
		 wget $VirtualImageURL_$(printf %04g $NumberOfVMs)
	fi
	mv *.ova guestos_$(printf %04g $NumberOfVMs).ova
let NumberOfVMs=NumberOfVMs-1
done

# Imports the VM and removes it right afterwards.
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	echo su -c "VBoxManage import /usr/share/virtualbox/guestos_$(printf %04g $NumberOfVMs).ova --vsys 0 --vmname guestos_$(printf %04g $NumberOfVMs)" guestos
	rm /usr/share/virtualbox/*.ova
let NumberOfVMs=NumberOfVMs-1
done

# Sets memory size of VM 
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	 su -c 'VBoxManage modifyvm guestos_$(printf %04g $NumberOfVMs).ova --memory $guestosram_$(printf %04g $NumberOfVMs).ova' guestos
     let NumberOfVMs=NumberOfVMs-1
done

# Changes VM to proper bridged if asked
# Temporary kludge. This program does not work if WiFi and Ethernet are both being used
networktype=`VBoxManage showvminfo Vu2ReallyReally | grep "NIC 1:" | awk '{ print $6 }' | tr -d ','`
case $networktype in
	"NAT")
		:
		;;
	"Bridged")
		vboxmanage list bridgedifs | grep -w "Name" | awk '{ print $2 }' | while read output;
		do
		intertube=0
		echo "begin ping"
		ping -c 1 -I $output google.com
		if [ $? -eq  0 ]; then
		     ping success
		     export NumberOfVMs=`cat /variables/NumberOfVMs`
			 while [  $NumberOfVMs -gt 0 ];do
				 echo "VBoxManage modifyvm guestos_$(printf %04g $NumberOfVMs) --nic1 bridged"
				 echo "VBoxManage modifyvm guestos_$(printf %04g $NumberOfVMs) --bridgeadapter1 $output"
		     let NumberOfVMs=NumberOfVMs-1
			 done
		else
			 echo "fail ping"           
		fi
		done
		;;
	*)
		:
		;;
esac

# Turns off VirtualBox warning messages
su -c 'VBoxManage setextradata global GUI/SuppressMessages remindAboutAutoCapture,confirmInputCapture,remindAboutMouseIntegration,remindAboutWrongColorDepth,showRuntimeError.warning.HostAudioNotResponding,remindAboutGoingSeamless,remindAboutInputCapture,remindAboutGoingFullscreen,remindAboutMouseIntegrationOff,confirmGoingSeamless,remindAboutPausedVMInput,confirmVMReset,confirmGoingFullscreen' guestos

# Turns off VirtualBox Mini Toolbar
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	su -c 'VBoxManage setextradata guestos_$(printf %04g $NumberOfVMs) GUI/ShowMiniToolBar no' guestos
let NumberOfVMs=NumberOfVMs-1
done

# Turns off VirtualBox menus, shortcut keys, etc.
su -c 'VBoxManage setextradata global GUI/Input/MachineShortcuts "TakeScreenshot=None,MouseIntegration=None,TypeCAD=None,TypeCABS=None,Pause=None,Reset=None,SaveState=None,Shutdown=None,PowerOff=None,Close=None,FullscreenMode=None,SeamlessMode=None,ScaleMode=None,WindowAdjust=None,PopupMenu=None, SettingsDialog=None,InformationDialog=None,NetworkAdaptersDailog=None,SharedFoldersDialog=None,InstallGuestAdditions=None"' guestos

# Fixes USB Issue
adduser vubadmin vboxusers
adduser guestos vboxusers

# Copy VirtualBox XSession
cp /media/cdrom/pool/config_files/xsessions/VirtualBox.desktop /usr/share/xsessions/

# Copy chvt 1 command
cp /media/cdrom/pool/config_files/etc/rc.local /etc/

# Copy Automount UDev Rules
cp /media/cdrom/pool/config_files/udev/10-usbmount.rules /etc/udev/rules.d/
cp /media/cdrom/pool/config_files/usrbin/vbox-automount-usb /usr/bin/
sed -i 's/replaceme/$NumberOfVMs/g' /usr/bin/vbox-automount-usb
chmod +x /usr/bin/vbox-automount-usb

# Start a %post interactive shell (Comment/Uncomment and/or move as needed for debugging)
/bin/bash

# How to implament the multi VM loop in %post%
echo
: <<'END'
read -p "NumberOfVMs: " NumberOfVMs
while [  $NumberOfVMs -gt 0 ];do
     echo guestos_$(printf %04g $NumberOfVMs) # Printf is for zero padding 1 --> 0001
     read -p "Passwords: " Passwords
     declare guestos_$(printf %04g $NumberOfVMs)=$Passwords
     let NumberOfVMs=NumberOfVMs-1
done
echo $guestos_0001
echo $guestos_0002
echo $guestos_0003
END
echo

# How to implament the multi VM loop in %pre%
echo
: <<'END'
echo $variablenamehere > /variables/the variablenamehere
bash /cdrom/pool/config_files/declare.sh variablenamehere
export variablenamehere_$(printf %04g $NumberOfVMs)=`cat /variables/variablenamehere_$(printf %04g $NumberOfVMs)`
echo variablenamehere_$(printf %04g $NumberOfVMs) > /variables/variablenamehere_$(printf %04g $NumberOfVMs)
END
echo

# Installation Logs - https://help.ubuntu.com/community/KickstartCompatibility#Installation_Logs
#cd /var/log/installer
#cat syslog | grep kickseed

# Change back to Virtual Terminal 1 where the Install has been running
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end
