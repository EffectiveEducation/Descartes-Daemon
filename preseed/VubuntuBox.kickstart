#Generated by Kickstart Configurator
#platform=x86

#System language
lang en_US
#Language modules to install
langsupport ru_UA es_MX --default=en_US
#System keyboard
keyboard us
#System mouse
mouse
#System timezone
timezone America/Los_Angeles
#Root password
rootpw --disabled
#Initial user
user dummy --fullname "Dummy Account" --iscrypted --password $1$PhGr1JT6$V2qyBpenDSVlhreBxk4Z.0
#Reboot after installation
reboot
#Use text mode install
text
#Install OS instead of upgrade
install
#Use CDROM installation media
cdrom
#System bootloader configuration
bootloader --location=mbr 
#Clear the Master Boot Record
zerombr yes
#Partition clearing information
clearpart --all --initlabel 
#System authorization infomation
auth  --useshadow  --enablemd5 
#Network information
network --bootproto=dhcp --device=eth0
#Firewall configuration
firewall --disabled 
#X Window System configuration information
xconfig --depth=16 --resolution=800x600 --startxonboot



# ----------------------------------------------------------------------
# Script to run towards the beginning of the installation
# Note: d-i does some basic hardware detection, etc before running this
# ----------------------------------------------------------------------
%pre

# Changes to Virtual Terminal 6 so that output will display properly and can be interactive
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6


# Copy Binaries into Appropriate Locations to Have a More Robust initial environment
cp --recursive /cdrom/pool/binary-i386/* /

# Make a RamDisk to store Environmental Variables, so they can be used later in the %post script
mkfs -q /dev/ram1 8192
mkdir -p /variables
mount /dev/ram1 /variables


# Pre-Set Variables to Customize for Specific Organizations
# Example data shown below
# echo 'VubuntuBox' > /variables/VubAdminPasswd
# echo 'hccts' > /variables/GuestOSHostname
# echo 'http://vubuntubox.org/FreeDos_1.1.ova' > /variables/VirtualImageURL
# echo 'labassist' > /variables/VirtualImageURLUser
# echo 'Gr8Minds' > /variables/VirtualImageURLPasswd
# echo '80' > /variables/percentram
#SECTION NEEDS UPDATE TO MULTIUSER

# Get variables that will be used later in the %post script

# Get vubadmin Password
echo 'VubuntuBox Admin (vubadmin) Password'
echo '===================================='
echo
stty -echo
         while [[  $VubAdminPasswd != $VubAdminPasswd2 ]]; do        
             read -p "Enter the Password for the vubadmin user: " VubAdminPasswd
             echo
			 read -p "Confirm vubadmin Password: " VubAdminPasswd2
 			 if [[ $VubAdminPasswd != $VubAdminPasswd2 ]];
				 then
				 	 echo
 				 	 echo "Passwords do not match. Please retry"
 				 	 echo
				 else
			  		 :
			 fi
         done
stty echo
echo $VubAdminPasswd > /variables/VubAdminPasswd
echo
echo

# Get number of Virtual Machines the user would like to install at this time
echo 'Virtual Machine Number'
echo '================='
read -p "How many Virtual Machines would you like?" NumberOfVMs
echo $NumberOfVMs > /variables/NumberOfVMs
echo
echo


# Get Guest OS Hostname, which will also be used as part of the Host OS Hostname
echo
echo 'Guest OS Hostname'
echo '================='
echo 'This will also be used in the Host OS hostname, where it will have the same name,'
echo 'with "-vub" added as a suffix'
echo
read -p "Enter the main Guest OS Hostname: " GuestOSHostname
echo $GuestOSHostname > /variables/GuestOSHostname
echo
echo
echo
echo


# Gets amount of RAM to be alliocated to each VM
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	read -p "Enter percentage of RAM to allot GuestOS$(printf %04g $NumberOfVMs) (only use integers): " percentram$(printf %04g $NumberOfVMs)
	while (( $percentokay != 1 )); do
		 echo RAM Alliocation for guestos`printf %04g $NumberOfVMs`
		 echo '======================='
		 echo
		 read -p "Enter percentage of RAM to allot GuestOS$(printf %04g $NumberOfVMs) (only use integers): " percentram$(printf %04g $NumberOfVMs)
		 if (( $percentram < 100 )); then
			 	percentokay$(printf %04g $NumberOfVMs)=1
		 else
			 	echo
			 	echo "The number you selected is either too high or otherwise incorrect. Please try again"
			 	echo
		 fi
	done
    let NumberOfVMs=NumberOfVMs-1
done


# Get URL to be used to download Virtual Image file at the end of the installation
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	echo Virtual Machine OVA URL for guestos`printf %04g $NumberOfVMs`
	echo '======================='
	echo
	echo 'VubuntuBox will download a virtual image after installing itself.'
	echo 'It can use http, https, ftp, or smb (windows file sharing)'
	echo 'It will use either wget or smbget.  Read their documentation for more info.'
	echo
	read -p "Enter the full URL of the Virtual Image: " VirtualImageURL$(printf %04g $NumberOfVMs)
	echo $VirtualImageURL > /variables/VirtualImageURL$(printf %04g $NumberOfVMs)
	echo

	if [[ $VirtualImageURL = smb://* ]];
	then
		read -p "If required, enter the username for the Virtual Image URL: " VirtualImageURLUser$(printf %04g $NumberOfVMs)
		echo $VirtualImageURLUser > /variables/VirtualImageURLUser$(printf %04g $NumberOfVMs)
		echo
		read -p "If required, enter the username for the Virtual Image URL: " VirtualImageURLUser$(printf %04g $NumberOfVMs)
		echo $VirtualImageURLUser > /variables/VirtualImageURLUser$(printf %04g $NumberOfVMs)
		echo
		stty -echo
	        	 while [[  $VirtualImageURLPasswd != $VirtualImageURLPasswd2 ]]; do        
	        		 read -p "If required, enter the password for the Virtual Image URL: " VirtualImageURLPasswd$(printf %04g $NumberOfVMs)
	        		 echo
				 	 read -p "Confirm vubadmin Password: " VirtualImageURLPasswd2$(printf %04g $NumberOfVMs)
					 if [[ $VirtualImageURLPasswd != $VirtualImageURLPasswd2 ]];
					 then
					 	 echo
	 				 	 echo "Passwords do not match. Please retry"
	 				 	 echo
					 else
				  	 	 :
				 	fi
	         	 done
		stty echo
	else
		:
	fi
	echo $VirtualImageURLPasswd > /variables/VirtualImageURLPasswd$(printf %04g $NumberOfVMs)
	echo
	echo
let NumberOfVMs=NumberOfVMs-1
done
echo
echo

# Confirms that the user knows that the disk is going to get wiped with this installation
echo 'WARNING!!! WARNING!!! WARNING!!!'
echo 'WARNING! THE EXISTING DATA IN THIS HARDDISK WILL BE OVERWRITTEN!'
echo 'ALL EXISTING DATA WILL BE LOST'
echo
read -p "Are you sure you want to continue? ? (y/n) " -n 1 REPLY
echo
if [[ "$REPLY" != "y" ]]; then
    shutdown      
fi
echo
read -p "Let me ask you again, Are you sure you want to continue? (y/n) " -n 1 REPLY
echo
if [[ "$REPLY" != "y" ]]; then
    shutdown      
fi

# Start a %pre interactive shell (Comment/Uncomment and/or move as needed for debugging)
# /bin/ash

# Change back to Virtual Terminal 1 where the Install has been running
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

# Unmount RamDisk, but still leaving it in memory
umount /variables


# Unmount Vub, but still leaving it in the memory
unmount /vub


# Automatically erases part of existing operating system, so that it avoids the confirmation dialogue about the drive being mounted
# See https://bugs.launchpad.net/ubuntu/+source/debian-installer/+bug/1370315
dd if=/dev/zero of=/dev/sda bs=1M count=10

%end



# ---------------------------------------------------
# Script to run towards the end of the installation.
# Note: This does not run at the very end, as the
#       d-i still runs add users, etc, after this
# ---------------------------------------------------
%post

# Changes to Virtual Terminal 6 so that output will display properly and can be interactive
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6

# Remount the RamDisk to get Variables
mkdir -p /variables
mount /dev/ram1 /variables


# Import Variables
export GuestOSHostname=`cat /variables/GuestOSHostname`
export VubAdminPasswd=`cat /variables/VubAdminPasswd`
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
export VirtualImageURL$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURL$(printf %04g $NumberOfVMs)`
export VirtualImageURLUser$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURLUser$(printf %04g $NumberOfVMs)`
export VirtualImageURLPasswd$(printf %04g $NumberOfVMs)=`cat /variables/VirtualImageURLPasswd$(printf %04g $NumberOfVMs)`
export percentram$(printf %04g $NumberOfVMs)=`cat /variables/percentram$(printf %04g $NumberOfVMs)`
let NumberOfVMs=NumberOfVMs-1
done

# Does math to figure out guestosram from percentram
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	ram=`free -mt | grep Mem | awk '{print $2}'`
	ramvartransfer$(printf %04g $NumberOfVMs)=$(($ram*$percentram$(printf %04g $NumberOfVMs)))
	guestosram$(printf %04g $NumberOfVMs)=$(($ramvartransfer$(printf %04g $NumberOfVMs)/100))
let NumberOfVMs=NumberOfVMs-1
done 


# Add Users
# Adds vubdmin User
# Adds vubdmin to sudoer
adduser --disabled-password --gecos "VirtualBox Admin" vubadmin
echo "vubadmin:$VubAdminPasswd" | chpasswd
usermod -a -G sudo vubadmin

# Adds the GuestOS Users
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	guestosname=guestos$(printf %04g $NumberOfVMs)
	adduser --disabled-password --gecos $guestosname guestos`printf %04g $NumberOfVMs`
	passwd guestos`printf %04g $NumberOfVMs` -d
let NumberOfVMs=NumberOfVMs-1
done

# Replaces lightdm with SLiM
# Replaces Lubuntu-Desktop with LXDE (for compatability)
#apt-get remove lightdm -y
#apt-get install slim -y
#apt-get install LXDE -y
#apt-get remove lubuntu-desktop -y
#apt-get autoremove -y

# Install VirtualBox from its Repository
echo 'deb http://download.virtualbox.org/virtualbox/debian trusty contrib' >> /etc/apt/sources.list
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | apt-key add -
apt-get update
apt-get install virtualbox-4.3 -y

# Fixes Kernel driver not installed problem
# From http://www.binarytides.com/fix-vbox-kernel-driver-error/
apt-get install build-essential module-assistant -y
m-a prepare
/etc/init.d/vboxdrv setup

# Installs smbclient for smbget
apt-get install smbclient -y

# Download Virtual Image from $VirtualImageURL
# Better user/password handling should occur as there is currently the assumption that smb has a user and password and wget doesn't
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	cd /usr/share/virtualbox
	if [[ $VirtualImageURL = smb://* ]];
	then
		 smbget $VirtualImageURL --username=$VirtualImageURLUser --password=$VirtualImageURLPasswd
	else
		 wget $VirtualImageURL
	fi
	vm *.ova guestos$(printf %04g $NumberOfVMs).ova
let NumberOfVMs=NumberOfVMs-1
done

# Imports the VMs using username specific - but then can remove ALL ovas as they should be removed and can keep the code cleaner
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	echo su -c "VBoxManage import /usr/share/virtualbox/guestos$(printf %04g $NumberOfVMs).ova --vsys 0 --vmname guestos$(printf %04g $NumberOfVMs)" guestos$(printf %04g $NumberOfVMs)
let NumberOfVMs=NumberOfVMs-1
done
rm /usr/share/virtualbox/*.ova

# Sets memory size of VM 
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	 su -c 'VBoxManage modifyvm guestos$(printf %04g $NumberOfVMs) --memory $guestosram$(printf %04g $NumberOfVMs)' guestos$(printf %04g $NumberOfVMs)
     let NumberOfVMs=NumberOfVMs-1
done

# Turns off VirtualBox warning messages
su -c 'VBoxManage setextradata global GUI/SuppressMessages remindAboutAutoCapture,confirmInputCapture,remindAboutMouseIntegration,remindAboutWrongColorDepth,showRuntimeError.warning.HostAudioNotResponding,remindAboutGoingSeamless,remindAboutInputCapture,remindAboutGoingFullscreen,remindAboutMouseIntegrationOff,confirmGoingSeamless,remindAboutPausedVMInput,confirmVMReset,confirmGoingFullscreen' guestos0001

# Turns off VirtualBox Mini Toolbar
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	 su -c 'VBoxManage setextradata guestos$(printf %04g $NumberOfVMs) GUI/ShowMiniToolBar no' guestos$(printf %04g $NumberOfVMs)
     let NumberOfVMs=NumberOfVMs-1
done

# Turns off VirtualBox menus, shortcut keys, etc.
su -c 'VBoxManage setextradata global GUI/Input/MachineShortcuts "TakeScreenshot=None,MouseIntegration=None,TypeCAD=None,TypeCABS=None,Pause=None,Reset=None,SaveState=None,Shutdown=None,PowerOff=None,Close=None,FullscreenMode=None,SeamlessMode=None,ScaleMode=None,WindowAdjust=None,PopupMenu=None, SettingsDialog=None,InformationDialog=None,NetworkAdaptersDailog=None,SharedFoldersDialog=None,InstallGuestAdditions=None"' guestos0001

# Fixes USB Issue
adduser vubadmin vboxusers
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
	 adduser guestos$(printf %04g $NumberOfVMs) vboxusers
     let NumberOfVMs=NumberOfVMs-1
done

# Copy VirtualBox XSession
cp /media/cdrom/pool/config_files/xsessions/VirtualBox.desktop /usr/share/xsessions/

# Copy SLiM Config
cp /media/cdrom/pool/config_files/etc/slim.conf /etc/

# Copy Automount UDev Rules
cp /media/cdrom/pool/config_files/udev/10-usbmount.rules /etc/udev/rules.d/
cp /media/cdrom/pool/config_files/usrbin/vbox-automount-usb /usr/bin/
chmod +x /usr/bin/vbox-automount-usb

# Start a %post interactive shell (Comment/Uncomment and/or move as needed for debugging)
/bin/bash

# This is one long note about how to implament the loop used for multi user install
echo
: <<'END'
For every time an action needs to modify/create GuestOS user
export NumberOfVMs=`cat /variables/NumberOfVMs`
while [  $NumberOfVMs -gt 0 ];do
     guestos$(printf %04g $NumberOfVMs) # Printf is for zero padding 1 --> 0001
     let NumberOfVMs=NumberOfVMs-1
done

If told 3 VMs, expected output is:
GuestOS0003
GuestOS0002
GuestOS0001
END
echo



# Change back to Virtual Terminal 1 where the Install has been running
# From http://hintshop.ludvig.co.nz/show/interactive-pre-post-install-scripts-redhat-kickstart/
chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end
